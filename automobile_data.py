# -*- coding: utf-8 -*-
"""Automobile_Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n9ZfrrxISmaxdb9rQhIi3ucUCCb5EdYo

**Link to DataSet**

https://drive.google.com/drive/folders/1EaOr6hdRDkEvy31ABSnH3iyClM4tRmS1

# <b> Problem 1: Import Pandas and Numpy in the notebook </b>
"""

# Import statements
import pandas as pd
import numpy as np

"""# <b> Problem 2 : Load the automobile_data.csv kept in the shared folder"""

# Mount your drive and read the csv file. Make sure you are using the correct file path
from google.colab import drive
drive.mount('/content/drive')

automobile_data = pd.read_csv('/content/drive/My Drive/Colab Notebooks/automobile_data.csv')
automobile_data.head(5)

"""# <b> Problem 3 : Do a basic inspection and print the first and last 15 rows of your dataframe"""

# Your code here
print(automobile_data.head(15))
print(automobile_data.tail(15))

"""# <b>Problem 4 : You need to clean the data a little bit now. Replace all column values with the values <code>?</code> and <code>n.a</code> with <code>NaN</code>"""

# Your code here
automobile_data = automobile_data.replace("?","NaN") 
automobile_data

"""# <b>Problem 5 : Print the company name which manufactured the most expensive car. Also print the price of the most expensive car"""

# Your code here

automobile_data = automobile_data.replace("NaN","0") 
automobile_data['price'] = automobile_data['price'].astype(int) 
automobile_data[['make','price']][automobile_data.price==automobile_data['price'].max()]

"""# <b>Problem 6 : Calculate maximum horsepowers for each company. </b>"""

# Your code here
automobile_data[["make", "horsepower"]].groupby(["make"])["horsepower"].max()

"""# <b> Problem 7 : Print the total number of cars manufactured by each company"""

# Your code here

automobile_data['make'].value_counts()

"""# <b> Problem 8 : Create a new column for the updated price. This updated price will be calculated on top of the given price - if the engine is in front, price will be same else if the engine is in rear, price will be doubled </b>

"""

# Your code here. Use apply and lambda
def updated_price(engine_location, price):
  if engine_location == 'front':
    updated_price = price
  else:
    updated_price = 2*price
    
  return updated_price

automobile_data['Updated_price'] = automobile_data.apply(lambda x: updated_price(x['engine-location'], x['price']),axis=1)

automobile_data

"""# <b>Problem 9 : Sort the dataframe by car and price columns"""

# Your code here
automobile_data[['price','make']].sort_values(by="price")

"""# <b> Problem 10 : Create a new column which stores the number of doors in a car as integers. """

# Your code here. Use apply

!pip install word2number

from word2number import w2n

automobile_data['doors'] = automobile_data['num-of-doors'].apply(w2n.word_to_num)

automobile_data

"""# <b>Problem 11 : Concatenate the two data frames given below firstly row wise and secondly column wise.</b>

<code>GermanCars = {'Company': ['Ford', 'Mercedes', 'BMV', 'Audi'], 'Price': [23845, 171995, 135925 , 71400]}</code>

<code>japaneseCars = {'Company': ['Toyota', 'Honda', 'Nissan', 'Mitsubishi '], 'Price': [29995, 23600, 61500 , 58900]}</code>
"""

# Your code here

GermanCars = {'Company': ['Ford', 'Mercedes', 'BMV', 'Audi'], 'Price': [23845, 171995, 135925 , 71400]}

japaneseCars = {'Company': ['Toyota', 'Honda', 'Nissan', 'Mitsubishi '], 'Price': [29995, 23600, 61500 , 58900]}

df1 = pd.DataFrame(GermanCars)
df2 = pd.DataFrame(japaneseCars)

frames = [df1, df2]

result = pd.concat(frames)
display(result)